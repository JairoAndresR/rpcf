openapi: 3.0.0
info:
  title: Research product collector framework
  version: "1.0.0"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  /v1/gruplac-definitions/:
    get:
      tags:
        - "Gruplac definitions"
      summary: Get all GrupLAC's definitions
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllGruplacResponse"
    post:
      tags:
        - "Gruplac definitions"
      summary: "Creates a new GrupLAC definition"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/GruplacResponse"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/GruplacResponse"

  /v1/gruplac-definitions/{GruplacID}:
    put:
      tags:
        - "Gruplac definitions"
      summary: "Edit a GrupLAC definition"
      parameters:
        - in: path
          name: GruplacID
          required: true
          schema:
            type: string
            example: "9f0a2402-276f-4903-b62b-f13533164e85"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/GruplacResponse"
      responses:
        "200":
          description: "OK"
    get:
      tags:
        - "Gruplac definitions"
      summary: "Get a specific GrupLAC Definition"
      parameters:
        - in: path
          name: GruplacID
          required: true
          schema:
            type: string
            example: "9f0a2402-276f-4903-b62b-f13533164e85"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/GruplacResponse"
    delete:
      tags:
        - "Gruplac definitions"
      summary: "Delete a specific GrupLAC Definition"
      parameters:
        - in: path
          name: GruplacID
          required: true
          schema:
            type: string
            example: "9f0a2402-276f-4903-b62b-f13533164e85"
      responses:
        "200":
          description: "OK"

  /v1/product-definitions/:
    get:
      tags:
        - "Product definitions"
      summary: "Get all product definitions"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AllProductResponse"
    post:
      tags:
        - "Product definitions"
      summary: "Creates a new product definition"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/ProductResponse"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ProductResponse"
  /v1/product-definitions/{ProductID}:
    put:
      tags:
        - "Product definitions"
      summary: "Edit a product definition"
      parameters:
        - in: path
          name: ProductID
          required: true
          schema:
            type: string
            example: "9f0a2402-276f-4903-b62b-f13533164e85"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/ProductResponse"
      responses:
        "200":
          description: "OK"
    get:
      tags:
        - "Product definitions"
      summary: "Get a specific product definition"
      parameters:
        - in: path
          name: ProductID
          required: true
          schema:
            type: string
            example: "9f0a2402-276f-4903-b62b-f13533164e85"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ProductResponse"
    delete:
      tags:
        - "Product definitions"
      summary: "Delete a specific product definition"
      parameters:
        - in: path
          name: ProductID
          required: true
          schema:
            type: string
            example: "9f0a2402-276f-4903-b62b-f13533164e85"
      responses:
        "200":
          description: "OK"

  /v1/accounts/register/:
    post:
      tags:
        - "Users"
      operationId: api.jxm.register
      summary: It creates a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: This service will create a new account and a new user asociated with that account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignResponse"
        "422":
          $ref: "#/components/responses/422"
        "400":
          $ref: "#/components/responses/400"

  /v1/accounts/login/:
    post:
      tags:
        - "Users"
      operationId: api.jxm.login
      summary: It generates a credentials to be log in.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: This will validate the user credentials and if is valid will return the token and user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"

  /v1/accounts/validate/:
    post:
      tags:
        - "Users"
      summary: It valites a token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenValidationRequest"
      responses:
        "200":
          description: The token to validate is correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenValidationRequest"
        "400":
          $ref: "#/components/responses/400"
        "422":
          $ref: "#/components/responses/422"

components:
  parameters:
    platform:
      in: header
      name: platform
      required: true
      description: Platform sending the request.
      schema:
        type: string
    language:
      in: header
      name: language
      required: true
      description: language
      schema:
        type: string
  responses:
    "400":
      description: "Bad request, client error."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "422":
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description: internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
          description: "Error code, usually equivalent to the HTTP status code."
          example: 422
        title:
          type: string
          description: "Human-readable error explanation, if available."
          example: "user already exist"
        invalid_params:
          type: array
          description: "Invalid params"
          items:
            $ref: "#/components/schemas/InvalidParam"

    InvalidParam:
      type: object
      properties:
        name:
          type: string
          example: "email"
        reason:
          type: string
          example: "The user with the request email already exists"
        code:
          type: string
          example: "email-duplicated"
          enum:
            - "required_field"
            - "email_duplicated"
            - "invalid_captcha"
            - "invalid_token"
            - "invalid_password"
            - "user_doesnt_exist"
            - "invalid_multipart_file"
            - "invalid_csv_file"
            - "api_token_required"
            - "invalid_api_token"
            - "invalid_file_extension"
            - "invalid_account_id"
            - "invalid_content_type"

    SignResponse:
      $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: string
          example: "366ae73c-876d-11ea-bc55-0242ac130003"
        names:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "example@domain.com"
        company_name:
          type: string
          example: "Example company"
        phone:
          type: string
          example: +12025550102
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlL"
        account:
          type: string
          example: "f0164004-2762-4e9e-ab7d-7a10c0899383"
        created_at:
          type: number
          example: 1587871387
          description: It's the date in wich is created the register in Unix format.
        updated_at:
          type: number
          example: 1587871381
          description: It's the date in wich is update the register in Unix format
        role:
          type: string
          example: company
          description: it defines the role of the user.
        photo_url:
          type: string
          description: it is the url to retrieve the photo profile image.
          example: "https://api.juntosxmexico.mx/static/photos/03f3276a-9585-4b5a-9c93-b7d37329b8d0-2020-05-08T23:47:33-profile.png"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "example@company.com"
        password:
          type: string
          example: "mysecretpass"

    RegisterRequest:
      type: object
      properties:
        names:
          type: string
          example: John Doe
        email:
          type: string
          example: "example@domain.com"
        password:
          type: string
          example: "mysecretpass"


    GruplacResponse:
      type: object
      properties:
        id:
          type: string
          example: "9f0a2402-276f-4903-b62b-f13533164e85"
          readOnly: true
        name:
          type: string
          example: "GIIRA"
        url:
          type: string
          example: "https://scienti.minciencias.gov.co/gruplac/jsp/visualiza/visualizagr.jsp?nro=00000000001394"
        created_at:
          type: string
          example: "2020-11-22T02:29:07Z"
          readOnly: true
        updated_at:
          type: string
          example: "2020-11-22T02:29:07Z"
          readOnly: true

    AllGruplacResponse:
      type: object
      properties:
        definitions:
          type: array
          items:
            $ref:  "#/components/schemas/GruplacResponse"
        total:
          type: integer
          example: 1

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          example: "9f0a2402-276f-4903-b62b-f13533164e85"
          readOnly: true
        name:
          type: string
          example: "companies"
        definition:
          type: string
          example: "name: Empresas de base tecnológica\npath: \"/html[1]/body[1]/table[46]/tbody[1]/tr\"\n\nparser:\n  lookahead-manual: true\nfields:\n  -\n    name: type\n    ex: (<strong>)(.*)(</strong> :)\n  -\n    name: title\n    ex: (</strong> :)(.*)(<br/>)\n  -\n    name: nit\n    ex: (NIT:)(.*)(, Fecha)\n  -\n    name: registred_at\n    ex: (cámara:).*( <br/>)\n  -\n    name: has_market_products\n    ex: (<br/> )(\\012).* \n  -\n    name: authors\n    ex: (Autores:)(.*)(,)"
        created_at:
          type: string
          example: "2020-11-22T02:29:07Z"
          readOnly: true
        updated_at:
          type: string
          example: "2020-11-22T02:29:07Z"
          readOnly: true

    AllProductResponse:
      type: object
      properties:
        definitions:
          type: array
          items:
            $ref:  "#/components/schemas/ProductResponse"
        total:
          type: integer
          example: 1

    TokenValidationRequest:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiOGY1NDliMzktOTJiMC00OWI4LWJmZjEtMzA0OTM5MjRiNTI5IiwiYXV0aG9yaXplZCI6dHJ1ZSwiZW1haWwiOiJleGFtcGxlQGRvbWFpbi5jb20iLCJleHAiOjE2MTAzMzQ2MzcsIm5hbWVzIjoiSm9obiBEb2UifQ.bw8ITBjYciRL946paF6l8oyyYfkEto4eEYjCnBS9oWA"
        
